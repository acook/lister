require "yaml"

module Themer
  class Theme
    property colormap = Hash(String, Color).new
    property reset : Color = Color.new.set style: "normal"
    property default : Color | Nil

    def self.load(filename)
      yaml = Hash(String, Hash(String, StrNil | StrNil | StrNil)).new

      File.open filename do |file|
        yaml = YAML.parse(file).as_h
      end

      per_def = nil
      data = Hash(String, Color).new
      yaml.each do |k, v|
        colors = Color.new.tap do |c|
          c.set \
            style: v["style"]?.to_s, fg: v["fg"]?.to_s, bg: v["bg"]?.to_s,
            style16: v["style16"]?.to_s, fg16: v["fg16"]?.to_s, bg16: v["bg16"]?.to_s,
            style256: v["style256"]?.to_s, fg256: v["fg256"]?.to_s, bg256: v["bg256"]?.to_s
        end

        if k.to_s == "DEFAULT"
          per_def = colors
        else
          data[k.to_s] = colors
        end
      end

      self.new.tap do |t|
        t.default = per_def if per_def
        t.colormap = data
      end
    end

    def save(filename)
      per_def = @default
      per = colormap.dup
      per["DEFAULT"] = per_def if per_def
      File.open filename, mode: "w" do |file|
        file.puts YAML.dump per
      end
    end

    def for(id : String) : Color
      colormap[id]? || raise ArgumentError.new "#{self.class}#for(String) color id not found #{id.inspect}"
    end

    def for(ids : Array(String)) : Color
      found = nil
      ids.find do |id|
        found = colormap.fetch id, nil
        found = Color.new if id == "none"
        found
      end

      found || @default || raise ArgumentError.new("#{self.class}#for(Array) no match found for color ids #{ids.inspect}")
    end

    # the start of a new category of methods which will handle more use cases I've discovered
    # #all(ids)    -> returns all matching colors from the input list
    # #first(ids)  -> returns the first non-empty color from the input list or raises an error
    # #first?(ids) -> returns the first non-empty color from the input list or nil
    # #sum(ids)    -> returns a Color generated by combining all colors from the list, first takes precedence
    def all(ids : Array(String)) : Array(Color)
      ids.each_with_object(Array(Color).new) do |id, acc|
        if color = colormap.fetch id, nil
          acc << color
        elsif id == "none"
          acc << Color.new
        end
      end
    end

    def [](id : String) : Color
      colormap[id]
    end

    def []=(id : String, color : Color)
      colormap[id] = color || raise ArgumentError.new("key cannot be nil")
    end
  end
end
